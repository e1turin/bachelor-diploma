

// **наименование** — полное и краткое названия, условное обозначение разрабатываемого ПО;
// **назначение** — то, для чего, в какой области и с какой целью разрабатывается ПО;
// **основание для разработки** — документы, на основании которых производится разработка ПО;
// **функции** — перечень и описание функций разрабатываемого ПО;
// **структура** — описание архитектуры и компонентов разрабатываемого ПО;
// **пользовательский интерфейс** — в современном мире обязателен;
// надежность, безопасность, условия эксплуатации и проч. важные требования;
// **документация** — какая документация, в каком объеме и в соответствии с какими требованиями
// ГОСТов будет также разработана;
// **стадии и этапы разработки** — что и в какой последовательности разрабатывается;
// **порядок контроля и приемка** — как именно будет происходить сдача разработанного ПО Заказчику.

#import "prelude.typ": GOST_7_32__2017, struct, chapter, definition

#show: GOST_7_32__2017.with(
  title: "Реализация модуля моделирования аппаратуры для SCADA-систем",
  author: "Тюрин Иван Николаевич"
)

#struct("СОДЕРЖАНИЕ", outlined: false)

#outline(title: none)

#pagebreak()

#heading("Техническое задание", numbering: none)

= Наименование

Полное название: "Реализация модуля моделирования аппаратуры для SCADA-систем
на базе фреймворка Controls.kt".

Краткое название: "Реализация модуля моделирования аппаратуры для
SCADA-систем".

Условное обозначение: Hw4Ctls.kt (Hardware for Controls.kt, возможны изменения).

// **наименование** — полное и краткое названия, условное обозначение
// разрабатываемого ПО;

= Назначение
// **назначение** — то, для чего, в какой области и с какой целью
// разрабатывается ПО;

== Назначение ВКР

Назначением ВКР описывается в следующих пунктах.

- Подтверждение уровня компетенций выпускника.
- Применение полученных навыков и знаний за время обучения для решения
  прикладной задачи.
- Получение артефакта в виде разработанного ПО.
- Реализация самостоятельного программного модуля совместимого с Controls.kt,
  предоставляющего возможность для моделирования аппаратуры в системе,
  реализованной с использованием указанного фреймворка.

== Назначение разрабатываемого ПО.

Модуль моделирования аппаратуры для фреймворка Controls.kt предназначен для
создания программных моделей физических устройств и компонентов, входящих в
состав системы управления. Его основная задача — эмуляция работы реального
оборудования, что позволяет проводить тестирование и отладку системы без
необходимости подключения физических устройств. 

Данный модуль помогает разработчикам и инженерам снизить затраты на
тестирование, выявлять ошибки на ранних этапах разработки и ускорять процесс
интеграции системы управления с реальным оборудованием.

= Основания для разработки

Разработка ведется на основании следующих документов.

+ Документация фреймворка Controls.kt [Электронный ресурс] — URL:
  https://sciprog.center/projects/controls (дата обращения 26.02.2024).
+ Документация языка описания аппаратуры Chisel [Электронный ресурс] — URL:
  https://www.chisel-lang.org/docs (дата обращения 26.02.2024).
+ Научная публикация "Verik: Reinterpreting Kotlin as a Hardware Description Language" [Электронный ресурс] — URL:
  https://dspace.mit.edu/bitstream/handle/1721.1/145151/Wang-frwang-meng-eecs-2022-thesis.pdf (дата обращения 26.02.2024).

// **основание для разработки** — документы, на основании которых производится
// разработка ПО;

= Функции

//**функции** — перечень и описание функций разрабатываемого ПО;

В рамках ВКР ведется разработка программного модуля, к ключевым функциональным
возможностям модуля относятся следующие:

== Производство промежуточного представления описанных аппаратных компонентов.

Модуль предоставляет механизм для создания промежуточного представления (IR,
Intermediate Representation) аппаратных компонентов, описанных в системе. Это
представление служит основой для моделирования, позволяя унифицировать
взаимодействие между различными компонентами, ускорять вычисления и
обеспечивать удобство интеграции с другими инструментами фреймворка
Controls.kt.

== Моделирование аппаратных компонентов.

Функция моделирования позволяет эмулировать поведение физических устройств,
таких как датчики, исполнительные механизмы и интерфейсы ввода-вывода.
Используя виртуальные аналоги реального оборудования, разработчики могут
тестировать алгоритмы управления без необходимости в физическом доступе к
аппаратным узлам.

== Интерактивное тестирование.

Модуль поддерживает интерактивные сценарии тестирования, позволяя разработчикам
динамически изменять параметры модели, наблюдать за реакцией системы управления
и анализировать её поведение в различных условиях. Это ускоряет процесс
отладки, облегчает поиск ошибок и позволяет проводить эксперименты без риска
повредить реальное оборудование.

== Поддержка Hardware-in-the-Loop (HiL)-подобных тестов.

Функциональность модуля позволяет проводить тестирование, аналогичное HiL, но в
программной среде. Система управления может взаимодействовать с виртуальными
моделями аппаратных компонентов в реальном времени, что дает возможность
проверять корректность работы алгоритмов и выявлять возможные проблемы без
использования физического оборудования.

== Интеграция с системой Controls.kt.

Модуль полностью совместим с фреймворком Controls.kt, обеспечивая удобную
интеграцию с существующими компонентами системы. Это позволяет использовать
единый подход к моделированию, тестированию и верификации, а также упрощает
внедрение симуляционных моделей в процесс разработки управляющего ПО.

= Структура

// **структура** — описание архитектуры и компонентов разрабатываемого ПО;

== Ядро модуля

Отвечает за управление моделями аппаратных компонентов и их взаимодействие.

- Создание и обновление моделей – управление виртуальными аппаратными
компонентами.
- Передача сигналов и событий – моделирование связи между
элементами системы.
- Промежуточное представление (IR) – универсальный формат
данных, обеспечивающий совместимость и гибкость.

== Библиотека моделей

Содержит набор предопределенных аппаратных моделей и позволяет расширять функциональность.

- Готовые модели – эмуляция датчиков (температура, давление и т. д.), исполнительных механизмов (моторы, реле) и интерфейсов (GPIO, UART, I2C).
- Пользовательские модели – возможность добавления специфических компонентов под нужды проекта.

== Система моделирования

Отвечает за реалистичную симуляцию работы аппаратных компонентов.

- Обновление состояния моделей – изменение параметров во времени.
- Обработка событий – реакция на входные сигналы и взаимодействие между компонентами.
- Режимы работы – поддержка реального и ускоренного времени моделирования.

== Тестирование и отладка

Позволяет анализировать поведение системы и вносить изменения в процессе моделирования.

- Логирование параметров – запись данных для анализа.
- Визуализация процессов – представление информации в удобном формате.

== Интеграция с Controls.kt

Обеспечивает совместимость модуля с основным фреймворком.

- Использование стандартных интерфейсов – для связи с другими компонентами Controls.kt.
- Гибкость и расширяемость – возможность настройки и адаптации под разные задачи.

= Пользовательский интерфейс

// **пользовательский интерфейс** — в современном мире обязателен;

Пользовательским интерфейсом является файл конфигурации запуска модуля
моделирования и доменно-специфичный язык описания моделей. Пользователь должен
указать в файле конфигурации следующие параметры:

- Список моделируемых аппаратных компонентов (датчики, исполнительные механизмы
  и интерфейсы ввода-вывода).
- Начальные параметры компонентов (например, стартовое значение датчика
  температуры, положение сервопривода).
- Частота обновления модели (в герцах или миллисекундах).
- Режим работы симуляции (реальное время или ускоренный режим).
- Настройки логирования (уровень детализации логов, включение записи событий в
  файл).
- Фильтрация событий (выбор, какие изменения состояний должны логироваться или
  выводиться в интерфейс отладки).

= Надежность, безопасность, условия эксплуатации

// надежность, безопасность, условия эксплуатации и проч. важные требования;

== Надежность

+ Модуль должен обеспечивать стабильную работу в течение длительных тестовых сессий.
+ В случае критических ошибок система должна гарантированно сохранять логи для последующего анализа.
+ Должны быть предусмотрены механизмы автоматического восстановления после сбоя (например, перезапуск моделирования).

== Масштабируемость и производительность

+ Модуль должен поддерживать многопоточное выполнение для обработки сложных моделей в реальном времени.
+ Должен быть обеспечен оптимальный баланс между точностью моделирования и загрузкой системы.
+ Возможность работы на различных аппаратных конфигурациях, от локальных машин до облачных серверов.

== Совместимость и интеграция

+ Полная совместимость с фреймворком Controls.kt.
+ Возможность интеграции с системами логирования и мониторинга (например, Prometheus, ELK).
+ Открытый API для взаимодействия с другими инструментами тестирования.

= Документация

// **документация** — какая документация, в каком объеме и в соответствии с
// какими требованиями ГОСТов будет также разработана;

Документация должна располагаться в документационных комментариях в коде и в
отдельных файлах с руководством по использованию модуля в репозитории проекта.

Документация к разработанному модулю должна быть автоматически сформирована из
документационных комментариев в исходном коде. Кроме того, в документации
должны содержаться примеры использования модуля. 

= Стадии и этапы разработки

// **стадии и этапы разработки** — что и в какой последовательности
// разрабатывается;


+ Подготовка к ВКР
  + Формулировка темы ВКР, целей и задач работы.
  + Согласование темы ВКР.
  + Анализ дополнительных источников.
  + Работа над заданием ВКР.

+ Выполнение задания ВКР
  + Формулирование требований к функциональности.
  + Разработка архитектуры и выбор технологий.
+ Разработка
  + Реализация ядра модуля и ключевых компонентов.
  + Разработка базовых моделей аппаратных компонентов.
  + Интеграция с фреймворком Controls.kt.
+ Тестирование и отладка
  + Юнит-тесты для проверки компонентов.
  + Интеграционное тестирование взаимодействия моделей.
+ Документирование и подготовка к выпуску
  + Создание пользовательской и технической документации.
  + Подготовка примеров использования.
+ Выпуск и сопровождение
  + Публикация стабильной версии.
  + Сбор отзывов и исправление ошибок.
+ Подготовка презентации.
+ Подготовка к защите.
+ Защита ВКР.
  + Презентация работы.
  + Ответы на вопросы.

= Порядок контроля и приема

// **порядок контроля и приемка** — как именно будет происходить сдача
// разработанного ПО Заказчику.

Порядок контроля и приемки:

1. Внутренний контроль.
  + Статическое тестирование кода (ревью).
  + Автоматическое тестирование (юнит- и интеграционные тесты).
2. Приемочные испытания.
  + Запуск модуля с тестовыми конфигурациями.
  + Проверка работы ключевых функций по заранее составленным сценариям.
  + Оценка производительности и устойчивости при длительном моделировании.
3. Финальная приемка.
  + Подтверждение соответствия требованиям.
  + Проверка полноты и актуальности документации.

